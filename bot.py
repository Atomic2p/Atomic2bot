import logging
import aiohttp
import aiosqlite
import os
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üìà –ö—É—Ä—Å—ã"), KeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
menu.add(KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton("üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è"))
menu.add(KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"), KeyboardButton("üí¨ –ß–∞—Ç"))

async def init_db():
    async with aiosqlite.connect('data.db') as db:
        await db.execute('CREATE TABLE IF NOT EXISTS rates (platform TEXT PRIMARY KEY, usdt REAL, btc REAL)')
        await db.execute('CREATE TABLE IF NOT EXISTS ads (id INTEGER PRIMARY KEY AUTOINCREMENT, content TEXT)')
        await db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY)')
        await db.commit()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    async with aiosqlite.connect('data.db') as db:
        await db.execute('INSERT OR IGNORE INTO users (id) VALUES (?)', (message.from_user.id,))
        await db.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∏ –∫—É—Ä—Å–æ–≤.", reply_markup=menu)

@dp.message_handler(lambda m: m.text == "üìà –ö—É—Ä—Å—ã")
async def get_rates(message: types.Message):
    async with aiosqlite.connect('data.db') as db:
        cursor = await db.execute('SELECT platform, usdt, btc FROM rates')
        rows = await cursor.fetchall()
        if not rows:
            await message.answer("–ö—É—Ä—Å—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return
        text = "<b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n"
        for row in rows:
            platform, usdt, btc = row
            text += f"\n<b>{platform}:</b>\nUSDT: {usdt}‚ÇΩ\nBTC: {btc}‚ÇΩ\n"
        await message.answer(text, parse_mode="HTML")

async def fetch_mosca_rates():
    url = "https://mosca.moscow/valuation"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            html = await resp.text()
    soup = BeautifulSoup(html, "html.parser")
    usdt = btc = 0.0
    for card in soup.select(".valuation__card"):
        title_tag = card.select_one(".valuation__title")
        value_tag = card.select_one(".valuation__value")
        if not title_tag or not value_tag:
            continue
        title = title_tag.text
        value = value_tag.text.strip().replace("‚ÇΩ", "").replace(" ", "").replace(",", ".")
        try:
            rate = float(value)
        except ValueError:
            continue
        if "USDT" in title:
            usdt = rate
        elif "BTC" in title:
            btc = rate
    return {'platform': 'Mosca', 'usdt': usdt, 'btc': btc}

async def fetch_abcex_rates():
    return {'platform': 'Abcex', 'usdt': 93.2, 'btc': 6700000.0}

@dp.message_handler(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")
async def update_rates_auto(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await message.answer("–û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...")
    try:
        mosca = await fetch_mosca_rates()
        abcex = await fetch_abcex_rates()
        async with aiosqlite.connect('data.db') as db:
            for rate in [mosca, abcex]:
                await db.execute('REPLACE INTO rates (platform, usdt, btc) VALUES (?, ?, ?)', (rate['platform'], rate['usdt'], rate['btc']))
            await db.commit()
        await message.answer("–ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda m: m.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def calculator(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nMosca USDT 1000")

@dp.message_handler()
async def universal_handler(message: types.Message):
    if any(p in message.text for p in ["Mosca", "Abcex"]):
        parts = message.text.strip().split()
        if len(parts) != 3:
            return
        platform, currency, amount = parts
        try:
            amount = float(amount)
        except ValueError:
            return
        async with aiosqlite.connect('data.db') as db:
            cursor = await db.execute('SELECT usdt, btc FROM rates WHERE platform = ?', (platform,))
            row = await cursor.fetchone()
            if not row:
                await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
                return
            usdt_rate, btc_rate = row
            if currency.upper() == "USDT":
                result = amount * usdt_rate
            elif currency.upper() == "BTC":
                result = amount * btc_rate
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞.")
                return
            await message.answer(f"{amount} {currency.upper()} = {result}‚ÇΩ")
        return

    if message.reply_to_message:
        if "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ" in message.reply_to_message.text.lower():
            async with aiosqlite.connect('data.db') as db:
                await db.execute('INSERT INTO ads (content) VALUES (?)', (message.text,))
                await db.commit()
            await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return
        if "—á–∞—Ç" in message.reply_to_message.text.lower():
            text = f"<b>{message.from_user.first_name}:</b> {message.text}"
            async with aiosqlite.connect('data.db') as db:
                cursor = await db.execute("SELECT id FROM users")
                users = await cursor.fetchall()
            for user in users:
                try:
                    await bot.send_message(user[0], text, parse_mode="HTML")
                except:
                    continue
            return

@dp.message_handler(lambda m: m.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_ad(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

@dp.message_handler(lambda m: m.text == "üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: types.Message):
    async with aiosqlite.connect('data.db') as db:
        cursor = await db.execute('SELECT content FROM ads')
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ü—É—Å—Ç–æ.")
        return
    text = "\n".join([f"{i+1}. {row[0]}" for i, row in enumerate(rows)])
    await message.answer("<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n" + text, parse_mode="HTML")

@dp.message_handler(lambda m: m.text == "üí¨ –ß–∞—Ç")
async def chat_entry(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º.")

if __name__ == '__main__':
    import asyncio
    asyncio.run(init_db())
    executor.start_polling(dp, skip_updates=True)
