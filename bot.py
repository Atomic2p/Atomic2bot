import os
import logging
import aiohttp
import asyncpg
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Text, Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_TOKEN = "8193351796:AAH7R7nfykFOHrGnv5bPsKc9AO3bKhGQjm0"
ADMIN_ID = 5245320529
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/botdb")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üìà –ö—É—Ä—Å—ã"), KeyboardButton("   –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
menu.add(KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton("üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è"))
menu.add(KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"), KeyboardButton("üí¨ –ß–∞—Ç"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL)
async def init_db():
    try:
        pool = await asyncpg.create_pool(dsn=DATABASE_URL)
        async with pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS rates (
                    platform TEXT PRIMARY KEY,
                    usdt REAL,
                    btc REAL
                )
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS ads (
                    id SERIAL PRIMARY KEY,
                    content TEXT
                )
            ''')
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id BIGINT PRIMARY KEY
                )
            ''')
        return pool
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
        await conn.execute('INSERT INTO users (id) VALUES ($1) ON CONFLICT DO NOTHING', message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∏ –∫—É—Ä—Å–æ–≤.", reply_markup=menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å—ã"
@dp.message(Text("üìà –ö—É—Ä—Å—ã"))
async def get_rates(message: types.Message):
    async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
        rows = await conn.fetch('SELECT platform, usdt, btc FROM rates')
        if not rows:
            await message.answer("–ö—É—Ä—Å—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return
        text = "<b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n"
        for row in rows:
            platform, usdt, btc = row['platform'], row['usdt'], row['btc']
            text += f"\n<b>{platform}:</b>\nUSDT: {usdt}‚ÇΩ\nBTC: {btc}‚ÇΩ\n"
        await message.answer(text, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Å mosca.moscow
async def fetch_mosca_rates():
    url = "https://mosca.moscow/valuation"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                resp.raise_for_status()
                html = await resp.text()
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ mosca.moscow: {e}")
        return {'platform': 'Mosca', 'usdt': 0.0, 'btc': 0.0}
    soup = BeautifulSoup(html, "html.parser")
    usdt = btc = 0.0
    for card in soup.select(".valuation__card"):
        title_tag = card.select_one(".valuation__title")
        value_tag = card.select_one(".valuation__value")
        if not title_tag or not value_tag:
            continue
        title = title_tag.text
        value = value_tag.text.strip().replace("‚ÇΩ", "").replace(" ", "").replace(",", ".")
        try:
            rate = float(value)
        except ValueError:
            logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
            continue
        if "USDT" in title:
            usdt = rate
        elif "BTC" in title:
            btc = rate
    return {'platform': 'Mosca', 'usdt': usdt, 'btc': btc}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ Abcex (–∑–∞–≥–ª—É—à–∫–∞)
async def fetch_abcex_rates():
    return {'platform': 'Abcex', 'usdt': 93.2, 'btc': 6700000.0}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"
@dp.message(Text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"))
async def update_rates_auto(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await message.answer("–û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...")
    try:
        mosca = await fetch_mosca_rates()
        abcex = await fetch_abcex_rates()
        async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
            for rate in [mosca, abcex]:
                await conn.execute(
                    'INSERT INTO rates (platform, usdt, btc) VALUES ($1, $2, $3) '
                    'ON CONFLICT (platform) DO UPDATE SET usdt = $2, btc = $3',
                    rate['platform'], rate['usdt'], rate['btc']
                )
        await message.answer("–ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
@dp.message(Text("   –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
async def calculator(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nMosca USDT 1000")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def universal_handler(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if any(p in message.text for p in ["Mosca", "Abcex"]):
        parts = message.text.strip().split()
        if len(parts) != 3:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: <–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞> <–í–∞–ª—é—Ç–∞> <–°—É–º–º–∞>\n–ü—Ä–∏–º–µ—Ä: Mosca USDT 1000")
            return
        platform, currency, amount = parts
        try:
            amount = float(amount)
        except ValueError:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
            row = await conn.fetchrow('SELECT usdt, btc FROM rates WHERE platform = $1', platform)
            if not row:
                await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform}.")
                return
            usdt_rate, btc_rate = row['usdt'], row['btc']
            if currency.upper() == "USDT":
                result = amount * usdt_rate
            elif currency.upper() == "BTC":
                result = amount * btc_rate
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π USDT –∏–ª–∏ BTC.")
                return
            await message.answer(f"{amount} {currency.upper()} = {result:.2f}‚ÇΩ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if message.reply_to_message and "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ" in message.reply_to_message.text.lower():
        async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
            await conn.execute('INSERT INTO ads (content) VALUES ($1)', message.text)
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç
    if message.reply_to_message and "—á–∞—Ç" in message.reply_to_message.text.lower():
        text = f"<b>{message.from_user.first_name}:</b> {message.text}"
        async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
            users = await conn.fetch("SELECT id FROM users")
        for user in users:
            try:
                await bot.send_message(user['id'], text, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
@dp.message(Text("üìù –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"))
async def add_ad(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
@dp.message(Text("üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è"))
async def show_ads(message: types.Message):
    async with (await asyncpg.create_pool(dsn=DATABASE_URL)).acquire() as conn:
        rows = await conn.fetch('SELECT content FROM ads')
    if not rows:
        await message.answer("–ü—É—Å—Ç–æ.")
        return
    text = "\n".join([f"{i+1}. {row['content']}" for i, row in enumerate(rows)])
    await message.answer("<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n" + text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ß–∞—Ç"
@dp.message(Text("üí¨ –ß–∞—Ç"))
async def chat_entry(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        await init_db()
        await dp.start_polling(bot, allowed_updates=["message"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
